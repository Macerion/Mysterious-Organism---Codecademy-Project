// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ['A', 'T', 'C', 'G']
  return dnaBases[Math.floor(Math.random() * 4)] 
};

// Returns a random single stand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = []
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase())
  };
  return newStrand
};
let currentDna = mockUpStrand()
const pAequorFactory = (specimenNum, dna) => {
  return {
    specimenNum,
    dna,
    mutate() {
      const randIndex = Math.floor(Math.random() * this.dna.length);
      let newBase = returnRandBase();
        while (this.dna[randIndex] === newBase){
          newBase = returnRandBase();
        };
      this.dna[randIndex] = newBase;
      return this.dna;
    },
    compareDNA(otherObj) {
      const similarities = this.dna.reduce((acc, curr, idx, arr) => {
        if (arr[idx] === otherObj.dna[idx]){
          return acc + 1
        } else {
          return acc;
        }
      }, 0);
      const percentOfDNAShared = (similarities / this.dna.length) * 100;
      console.log(`${this.specimenNum} and ${this.otherObj.specimenNum} have ${percentOfDNAShared.toFixed(2)}% DNA in common`)
    },
    willLikelySurvive() {
      const cOrGBases = this.dna.filter(element => element === 'C' || element === 'G')
      if (cOrGBases.length / this.dna.length >= 0.6){
        return true
      } else {
        return false
      };
    },
    complementStrand(){
      
    },
  };
  const survivingSpecimen = [];
  let idCounter = 1;
    while (survivingSpecimen.length < 30){
      let newOrg = pAequorFactory(idCounter, mockUpStrand());
      if (newOrg.willLikelySurvive()){
        surivingSpecimen.push(newOrg);
      }
      idCounter++
    }
    console.log(survivingSpecimen)

};

console.log(pAequorFactory(1,mockUpStrand()))
